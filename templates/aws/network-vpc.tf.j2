# Create a VPC to launch our instances into
resource "aws_vpc" "main" {
  cidr_block         = var.main_cidr
  enable_dns_support = true
}

resource "aws_subnet" "public-subnet" {
  vpc_id     = aws_vpc.main.id

  count = length(var.public_subnets)
  cidr_block = var.public_subnets[count.index]
  # availability_zone = var.availability_zones[count.index]
}

resource "aws_internet_gateway" "router" {
  vpc_id = aws_vpc.main.id
}

resource "aws_route_table" "public" {
  vpc_id = aws_vpc.main.id
}

resource "aws_route" "public" {
  route_table_id         = aws_route_table.public.id
  destination_cidr_block = "0.0.0.0/0"
  gateway_id             = aws_internet_gateway.router.id
}

resource "aws_route_table_association" "public" {
  count = length(var.public_subnets)

  subnet_id      = aws_subnet.public-subnet[count.index].id
  route_table_id = aws_route_table.public.id
}
{% if data.provider.private_subnets is defined and
data.provider.private_subnets | length != 0 %}
resource "aws_subnet" "private-subnet" {
  vpc_id     = aws_vpc.main.id

  count = length(var.private_subnets)
  cidr_block = var.private_subnets[count.index]
  # availability_zone = var.availability_zones[count.index]
}

resource "aws_eip" "nat_private_eip" {
  vpc = true
}

resource "aws_nat_gateway" "private_subnets_gw" {
  allocation_id = aws_eip.nat_private_eip.id
  subnet_id     = aws_subnet.public-subnet[0].id
}

resource "aws_route_table" "private_nated" {
    vpc_id = aws_vpc.main.id

    route {
        cidr_block = "0.0.0.0/0"
        nat_gateway_id = aws_nat_gateway.private_subnets_gw.id
    }
    tags = {
        Name = "Route Table for NAT-ed private subnet"
    }
}

resource "aws_route_table_association" "table_private_nated" {
    count = length(var.private_subnets)

    subnet_id      = aws_subnet.private-subnet[count.index].id
    route_table_id = aws_route_table.private_nated.id
}
{% endif %}
